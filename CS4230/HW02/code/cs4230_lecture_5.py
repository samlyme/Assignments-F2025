# -*- coding: utf-8 -*-
"""CS4230 Lecture 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LrgzPWo8TAVV_prqiU2GMWyWP4qBKMAR

**BFS Code for 6-Node Graph**
"""

from collections import deque

# Build the graph as an adjacency list (dictionary)
G = {
    1: [2, 3, 4],
    2: [1, 3],
    3: [1, 2, 4],
    4: [1, 3, 5, 6],
    5: [4, 6],
    6: [4, 5]
}

def bfs_shortest_paths(G, start):
    """Run BFS from a start node and return distances to all others."""
    distances = {start: 0}
    visited = {start}
    queue = deque([start])

    while queue:
        node = queue.popleft()
        for neighbor in G[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                distances[neighbor] = distances[node] + 1
                queue.append(neighbor)

    return distances

# Example: BFS starting at node 1
distances_from_1 = bfs_shortest_paths(G, 1)
print("Shortest path distances from node 1:", distances_from_1)


def average_path_length(G):
    nodes = list(G.keys())
    total = 0
    count = 0

    for i in range(len(nodes)):
        distances = bfs_shortest_paths(G, nodes[i])
        for j in range(i+1, len(nodes)):
            total += distances[nodes[j]]
            count += 1

    return total / count

print("Average path length:", average_path_length(G))